{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","cardComponent","robots","map","user","components_Card","key","SearchBox","onChangeFunc","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","searchField","target","value","_this2","fetch","then","response","json","jsonResp","_this$state","filteredRobots","filter","elem","toLowerCase","includes","length","components_SearchBox","components_ErrorBoundary","components_Scroll","components_CardList","React","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.408cf555.chunk.js","sourcesContent":["import React from \"react\";\nimport \"tachyons\";\n\n// note can only return one element, or in other terms \"only one div\"\n// dib -> tachyons Display In-line Block\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    const cardComponent = robots.map((user) => {\n        return (\n            <Card\n                // note need to give each element a unique key\n                // this allows the virtual-DOM to have a identifier for each component\n\n                // Warning: Each child in a list should have a unique \"key\" prop.\n\n                key={user.id}\n                id={user.id}\n                name={user.name}\n                email={user.email}\n            />\n        );\n    });\n\n    return <div>{cardComponent}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ onChangeFunc }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                type=\"search\"\n                placeholder=\"Enter a robot to search\"\n                onChange={onChangeFunc}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n    // note style needs two layers of  {{}}\n    // the first {} is because we want to use a javascript expression\n    // the second {} is because we want to specify a javascript object\n    return (\n        <div\n            style={{\n                overflow: \"scroll\",\n                border: \"5px solid black\",\n                height: \"800px\",\n            }}\n        >\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n        };\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>There is an error here </h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\n// the CardList needs to interact with the SearchBox\n// CardList needs to know what is in the SearchBox, to filter out results\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        // now App has a state\n        this.state = {\n            robots: [],\n            searchField: \"\",\n        };\n    }\n\n    componentDidMount() {\n        // fetch from API some user data and then set the init state\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then((response) => response.json())\n            .then((jsonResp) => this.setState({ robots: jsonResp }));\n    }\n\n    // a method that takes in an event\n    onSearchChange = (event) => {\n        this.setState({ searchField: event.target.value });\n    };\n\n    render() {\n        // destructure from this.state\n        const { robots, searchField } = this.state;\n\n        const filteredRobots = robots.filter((elem) => {\n            return elem.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        // if the list of robots is length 0, that means the data fetch from the API\n        // has not yet occured.\n        return !robots.length ? (\n            <h1>Loading</h1>\n        ) : (\n            <div className=\"tc\">\n                <h1 className=\"f1\">Robofriends</h1>\n\n                {/**We pass in the method to searchBox */}\n                <SearchBox onChangeFunc={this.onSearchChange} />\n\n                <ErrorBoundary>\n                    {/** Runs the CardList based on a filtered list of robot\n                     * Note that CardList is contained within the Scroll and is\n                     * automatically passed as props.children in the Scroll Component\n                     */}\n                    <Scroll>\n                        <CardList robots={filteredRobots} />\n                    </Scroll>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}